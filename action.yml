name: "Grid.ai Customer Managed BYOC"
inputs:
  # required
  aws-access-key-id:
    required: true
  aws-secret-access-key:
    required: true
  gh-access-token:
    required: true
  # optional
  cluster-name:
    required: false
    default: "c$(date '+%y%m%d-%H%M%S')"
    type: string
    description: "Grid.ai Cluster Name"                  
  cloud-provider:
    required: false
    default: aws
    type: string    
    description: "Grid.ai Cluster Provider (aws is the only cloud supported)"                  
  byoc-region:
    required: false
    default: us-east-1
  cost_saving_mode:
    default: true
    required: false
    type: boolean    
    description: cost-saving mode enabled or not
  cloud-terraform-repo:
    required: false
    default: gridai/terraform-aws-grid-byoc-full
    type: string
  grid-args:
    required: false
    default: ""
    type: string    
    description: "grid run arguments"                  
  tf-file-args:
    required: false
    default: "./example/dev.tfvars"
    type: string    
    description: "tf apply --var-file argument "                  
  tf-var-args:
    required: false
    default: "\
        -var builder_ami_name_override='' \
        -var bastion_ami_override='' \
    "
    type: string    
    description: "tf apply -var arguments"  
  success-status:
    required: false
    default: "^running$"
    type: string               
    description: "grid cluster status text for successful execution"    
outputs:
  obj-type:
    value: ${{ steps.gridai-obj-status.outputs.obj-type }}
    description: "object id searched for"
  obj-id:
    value: ${{ steps.gridai-obj-status.outputs.obj-id }}
    description: "object id searched for"
  obj-status:
    value: ${{ steps.gridai-obj-status.outputs.obj-status }}
    description: "comma delimited status all of objects. ex: succeeded,succeeded,stopped"
  obj-tally:
    value: ${{ steps.gridai-obj-status.outputs.obj-tally }}
    description: "comma delimited tally status codes. ex: 2 succeeded,1 stopped"
  obj-summary:
    value: ${{ steps.gridai-obj-status.outputs.obj-summary }}
    description: "comma delimited unique status codes. ex: succeeded,stopped"
  obj-exit-code:
    value: ${{ steps.gridai-obj-status.outputs.obj-exit-code }}
    description: "0 if exited finding the supplied status, 1 otherwise"    
runs:
  using: "composite"
  steps:
    - run: |
        export cloud_provider=$(echo ${{ inputs.cloud-provider }} | tr '[:upper:]' '[:lower:]')
        if [ "${cloud_provider}" != "aws" ]; then
          echo "This script supports AWS only"
          exit 1
        fi
        echo "cloud_provider=${cloud_provider}" >> $GITHUB_ENV
      shell: bash
    - uses: aws-actions/setup-sam@v1
    - run: |
        # https://docs.aws.amazon.com/eks/latest/userguide/install-aws-iam-authenticator.html
        curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator
        chmod +x ./aws-iam-authenticator
        mkdir -p $HOME/bin
        cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator
        echo "$HOME/bin" >> $GITHUB_PATH
      shell: bash    
    - run: |
        # verify works
        aws-iam-authenticator help
      shell: bash

    - uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ inputs.aws-access-key-id }}
        aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
        aws-region: ${{ inputs.byoc-region }}    
    - run: |
        mkdir ~/.aws
        ls ~/.aws
        echo "[byoc-ops]" >> ~/.aws/credentials
        echo "aws_access_key_id = ${{ inputs.aws-access-key-id }}" >> ~/.aws/credentials 
        echo "aws_secret_access_key = ${{ inputs.aws-secret-access-key }}" >> ~/.aws/credentials 
        cat ~/.aws/credentials
        echo "[profile byoc-ops]"  >> ~/.aws/config
        echo "region=${{ inputs.byoc-region }}" >> ~/.aws/config
        echo "output=json" >> ~/.aws/config
        cat ~/.aws/config
      shell: bash    
    - uses: actions/checkout@v2     
      with:
        repository: ${{ inputs.cloud-terraform-repo }}             
        token: ${{ inputs.gh-access-token }} 
    - run: |
        # cluster name
        export obj_id=${{ inputs.cluster-name }}
        echo "obj_id=${obj_id}" >> $GITHUB_ENV
      shell: bash    
    - run: |
        cp ${{ inputs.tf-file-args }} $obj_id.tfvars
        echo public_access_cidrs=["0.0.0.0/0"] >> $obj_id.tfvars
      shell: bash    
    - run: |
        terraform init
      shell: bash    
        #  -var extra_assume_role_arn="[302180240179]"
        # -var az_skip_ids=[] \

    - run: |
        terraform apply -auto-approve -var-file $obj_id.tfvars \
        -var cluster_name=$obj_id \
        -var hostname=$obj_id.prod.grid.cloud \
        -var region=${{ inputs.byoc-region }} \
        -var testing_cluster=false \
        -var role_arn="" \
        -var external_id="" \
        -var grid_account_id="302180240179" \
        -var cost_saving_mode=${{ inputs.cost_saving_mode }} ${{ inputs.tf-var-args }} 
      shell: bash
    - run: |
        terraform output -json > tf.output.json
      shell: bash
    - id: terraform-apply
      run: |
        # aws 
        gridv1_cluster_value=$(cat tf.output.json | jq -r '.gridv1_cluster.value')
        echo "::set-output name=gridv1_cluster_value::$gridv1_cluster_value"        
      shell: bash

    - name: Get k8s config - we can use it for checking if needed
      run: |
        aws eks update-kubeconfig --name $obj_id
      shell: bash

    - name: Setup a cluster
      env:
        GRIDV1_CLUSTER_VALUE: '${{ steps.terraform-apply.outputs.gridv1_cluster_value }}'
      run: |
        cat << SCRIPTEOF > set_cluster.sh
        #!/bin/bash
        cat << EOF > \$1
        \$GRIDV1_CLUSTER_VALUE
        EOF
        SCRIPTEOF
        chmod +x set_cluster.sh
        VISUAL=./set_cluster.sh EDITOR=./set_cluster.sh grid clusters \
        ${{ inputs.cloud-provider }} \
        ${{ inputs.grid-args }} \
        $obj_id \
        --role-arn "not used but required" \
        --external-id "not used but required" \
        --edit-before-creation --wait
      shell: bash
